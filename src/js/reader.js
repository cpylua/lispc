module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "Data": parse_Data,
        "Token": parse_Token,
        "LineTerminator": parse_LineTerminator,
        "Comment": parse_Comment,
        "WhiteSpace": parse_WhiteSpace,
        "_": parse__,
        "Atomosphere": parse_Atomosphere,
        "InterTokenSpace": parse_InterTokenSpace,
        "Delimiter": parse_Delimiter,
        "Identifier": parse_Identifier,
        "Initial": parse_Initial,
        "Letter": parse_Letter,
        "SpecialInitial": parse_SpecialInitial,
        "Subsequent": parse_Subsequent,
        "SpecialSubsequent": parse_SpecialSubsequent,
        "PeculiaIdentifier": parse_PeculiaIdentifier,
        "Keyword": parse_Keyword,
        "SyntacticKeyword": parse_SyntacticKeyword,
        "ExpressionKeyword": parse_ExpressionKeyword,
        "Variable": parse_Variable,
        "Boolean": parse_Boolean,
        "Character": parse_Character,
        "CharacterName": parse_CharacterName,
        "String": parse_String,
        "StringElement": parse_StringElement,
        "Number": parse_Number,
        "Integer": parse_Integer,
        "Float": parse_Float,
        "Decimal": parse_Decimal,
        "Hexadecimal": parse_Hexadecimal,
        "BinaryDecimal": parse_BinaryDecimal,
        "OctDecimal": parse_OctDecimal,
        "Fraction": parse_Fraction,
        "Exponent": parse_Exponent,
        "DecimalPrefix": parse_DecimalPrefix,
        "HexPrefix": parse_HexPrefix,
        "OctPrefix": parse_OctPrefix,
        "BinaryPrefix": parse_BinaryPrefix,
        "ExponentMarker": parse_ExponentMarker,
        "Sign": parse_Sign,
        "Digits": parse_Digits,
        "DigitsHex": parse_DigitsHex,
        "DigitsOct": parse_DigitsOct,
        "DigitsBinary": parse_DigitsBinary,
        "Digit": parse_Digit,
        "Digit19": parse_Digit19,
        "DigitHex": parse_DigitHex,
        "DigitOct": parse_DigitOct,
        "DigitBinary": parse_DigitBinary,
        "Datum": parse_Datum,
        "List": parse_List,
        "ListDatum": parse_ListDatum,
        "QuotePrefix": parse_QuotePrefix,
        "Quote": parse_Quote,
        "Quasiquote": parse_Quasiquote,
        "UnquotePrefix": parse_UnquotePrefix,
        "UnquoteSplicing": parse_UnquoteSplicing,
        "Unquote": parse_Unquote
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_InterTokenSpace();
        if (result0 !== null) {
          result1 = parse_Data();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, data) {
              return data;
            })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_InterTokenSpace();
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return []; })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_Data() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result1 = parse_Datum();
        if (result1 !== null) {
          result2 = parse_InterTokenSpace();
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = clone(pos1);
          }
        } else {
          result1 = null;
          pos = clone(pos1);
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            pos1 = clone(pos);
            result1 = parse_Datum();
            if (result1 !== null) {
              result2 = parse_InterTokenSpace();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = clone(pos1);
              }
            } else {
              result1 = null;
              pos = clone(pos1);
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, data) {
              return data.map(function (t) {
                var d = t[0];
                return Array.isArray(d) ? toSexp(d) : d;
              });
            })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Token() {
        var result0;
        
        result0 = parse_Keyword();
        if (result0 === null) {
          result0 = parse_Variable();
          if (result0 === null) {
            result0 = parse_Boolean();
            if (result0 === null) {
              result0 = parse_Character();
              if (result0 === null) {
                result0 = parse_String();
                if (result0 === null) {
                  result0 = parse_Number();
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_LineTerminator() {
        var result0;
        
        if (/^[\n\r]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n\\r]");
          }
        }
        return result0;
      }
      
      function parse_Comment() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 59) {
          result0 = ";";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\";\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          result2 = parse_LineTerminator();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            if (input.length > pos.offset) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            result2 = parse_LineTerminator();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              if (input.length > pos.offset) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_WhiteSpace() {
        var result0;
        
        if (/^[ \t\n\r]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\n\\r]");
          }
        }
        return result0;
      }
      
      function parse__() {
        var result0, result1;
        
        reportFailures++;
        result1 = parse_WhiteSpace();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_WhiteSpace();
          }
        } else {
          result0 = null;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("whitespace");
        }
        return result0;
      }
      
      function parse_Atomosphere() {
        var result0;
        
        result0 = parse__();
        if (result0 === null) {
          result0 = parse_Comment();
        }
        return result0;
      }
      
      function parse_InterTokenSpace() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = [];
        result1 = parse_Atomosphere();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Atomosphere();
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return "" })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Delimiter() {
        var result0, result1;
        var pos0;
        
        result0 = parse__();
        if (result0 === null) {
          if (/^[()";]/.test(input.charAt(pos.offset))) {
            result0 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[()\";]");
            }
          }
          if (result0 === null) {
            pos0 = clone(pos);
            reportFailures++;
            if (input.length > pos.offset) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                if (input.length > pos.offset) {
                  result1 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("any character");
                  }
                }
              }
            } else {
              result0 = null;
            }
            reportFailures--;
            if (result0 === null) {
              result0 = "";
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_Identifier() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Initial();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_Subsequent();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_Subsequent();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, first, rest) {
              return first + rest.join("");
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_PeculiaIdentifier();
        }
        return result0;
      }
      
      function parse_Initial() {
        var result0;
        
        result0 = parse_Letter();
        if (result0 === null) {
          result0 = parse_SpecialInitial();
        }
        return result0;
      }
      
      function parse_Letter() {
        var result0;
        
        if (/^[a-zA-Z]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z]");
          }
        }
        return result0;
      }
      
      function parse_SpecialInitial() {
        var result0;
        
        if (/^[!$%&*\/:<=>?^_~]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[!$%&*\\/:<=>?^_~]");
          }
        }
        return result0;
      }
      
      function parse_Subsequent() {
        var result0;
        
        result0 = parse_Initial();
        if (result0 === null) {
          result0 = parse_Digit();
          if (result0 === null) {
            result0 = parse_SpecialSubsequent();
          }
        }
        return result0;
      }
      
      function parse_SpecialSubsequent() {
        var result0;
        
        if (/^[+\-.@]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[+\\-.@]");
          }
        }
        return result0;
      }
      
      function parse_PeculiaIdentifier() {
        var result0;
        
        if (/^[+\-]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[+\\-]");
          }
        }
        return result0;
      }
      
      function parse_Keyword() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_SyntacticKeyword();
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          result1 = parse_Delimiter();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = clone(pos2);
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, keyword) {
              return {type: 'symbol', value: keyword[0]};
            })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_SyntacticKeyword() {
        var result0;
        
        result0 = parse_ExpressionKeyword();
        if (result0 === null) {
          if (input.substr(pos.offset, 4).toLowerCase() === "else") {
            result0 = input.substr(pos.offset, 4);
            advance(pos, 4);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"else\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 6).toLowerCase() === "define") {
              result0 = input.substr(pos.offset, 6);
              advance(pos, 6);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"define\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 16).toLowerCase() === "unquote-splicing") {
                result0 = input.substr(pos.offset, 16);
                advance(pos, 16);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"unquote-splicing\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 7).toLowerCase() === "unquote") {
                  result0 = input.substr(pos.offset, 7);
                  advance(pos, 7);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"unquote\"");
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_ExpressionKeyword() {
        var result0;
        
        if (input.substr(pos.offset, 5).toLowerCase() === "quote") {
          result0 = input.substr(pos.offset, 5);
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"quote\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 6).toLowerCase() === "lambda") {
            result0 = input.substr(pos.offset, 6);
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"lambda\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 2).toLowerCase() === "if") {
              result0 = input.substr(pos.offset, 2);
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"if\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 4).toLowerCase() === "set!") {
                result0 = input.substr(pos.offset, 4);
                advance(pos, 4);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"set!\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 5).toLowerCase() === "begin") {
                  result0 = input.substr(pos.offset, 5);
                  advance(pos, 5);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"begin\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 4).toLowerCase() === "cond") {
                    result0 = input.substr(pos.offset, 4);
                    advance(pos, 4);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"cond\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 3).toLowerCase() === "and") {
                      result0 = input.substr(pos.offset, 3);
                      advance(pos, 3);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"and\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos.offset, 2).toLowerCase() === "or") {
                        result0 = input.substr(pos.offset, 2);
                        advance(pos, 2);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"or\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos.offset, 4).toLowerCase() === "case") {
                          result0 = input.substr(pos.offset, 4);
                          advance(pos, 4);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"case\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos.offset, 6).toLowerCase() === "letrec") {
                            result0 = input.substr(pos.offset, 6);
                            advance(pos, 6);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"letrec\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos.offset, 4).toLowerCase() === "let*") {
                              result0 = input.substr(pos.offset, 4);
                              advance(pos, 4);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"let*\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos.offset, 3).toLowerCase() === "let") {
                                result0 = input.substr(pos.offset, 3);
                                advance(pos, 3);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"let\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos.offset, 2).toLowerCase() === "do") {
                                  result0 = input.substr(pos.offset, 2);
                                  advance(pos, 2);
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"do\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos.offset, 5).toLowerCase() === "delay") {
                                    result0 = input.substr(pos.offset, 5);
                                    advance(pos, 5);
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"delay\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.substr(pos.offset, 10).toLowerCase() === "quasiquote") {
                                      result0 = input.substr(pos.offset, 10);
                                      advance(pos, 10);
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"quasiquote\"");
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_Variable() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        result0 = parse_Keyword();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        if (result0 !== null) {
          result1 = parse_Identifier();
          if (result1 !== null) {
            pos2 = clone(pos);
            reportFailures++;
            result2 = parse_Delimiter();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = clone(pos2);
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, identifier) {
              return { type: 'symbol', value: identifier};
            })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Boolean() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "#t") {
          result0 = "#t";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#t\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          result1 = parse_Delimiter();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = clone(pos2);
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {
              return {type: 'boolean', value: true};
            })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 2) === "#f") {
            result0 = "#f";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#f\"");
            }
          }
          if (result0 !== null) {
            pos2 = clone(pos);
            reportFailures++;
            result1 = parse_Delimiter();
            reportFailures--;
            if (result1 !== null) {
              result1 = "";
              pos = clone(pos2);
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) {
                return {type: 'boolean', value: false};
              })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_Character() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "#\\") {
          result0 = "#\\";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\\\\\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_CharacterName();
          if (result1 !== null) {
            pos2 = clone(pos);
            reportFailures++;
            result2 = parse_Delimiter();
            reportFailures--;
            if (result2 !== null) {
              result2 = "";
              pos = clone(pos2);
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, val) {
              return {type: 'character', value: val};
            })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 2) === "#\\") {
            result0 = "#\\";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"#\\\\\"");
            }
          }
          if (result0 !== null) {
            if (input.length > pos.offset) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result1 !== null) {
              pos2 = clone(pos);
              reportFailures++;
              result2 = parse_Delimiter();
              reportFailures--;
              if (result2 !== null) {
                result2 = "";
                pos = clone(pos2);
              } else {
                result2 = null;
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, val) {
                return {type: 'character', value: val};
              })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_CharacterName() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 5) === "space") {
          result0 = "space";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"space\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return " "; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 7) === "newline") {
            result0 = "newline";
            advance(pos, 7);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"newline\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return "\n"; })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_String() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 34) {
          result0 = "\"";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_StringElement();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_StringElement();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 34) {
              result2 = "\"";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, val) {
              return {type: 'string', value: val.join("")};
            })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_StringElement() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "\\\\") {
          result0 = "\\\\";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\\\\\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return '\\'; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 2) === "\\\"") {
            result0 = "\\\"";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\\\"\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return '"'; })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            if (/^[^"\\]/.test(input.charAt(pos.offset))) {
              result0 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[^\"\\\\]");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_Number() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Float();
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          result1 = parse_Delimiter();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = clone(pos2);
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, val) {
              return {type: 'float', value: val};
            })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_Integer();
          if (result0 !== null) {
            pos2 = clone(pos);
            reportFailures++;
            result1 = parse_Delimiter();
            reportFailures--;
            if (result1 !== null) {
              result1 = "";
              pos = clone(pos2);
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, val) {
                return {type: 'integer', value: val};
              })(pos0.offset, pos0.line, pos0.column, result0[0]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_Integer() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_DecimalPrefix();
        if (result0 !== null) {
          result1 = parse_Decimal();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, val) { return val; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_Hexadecimal();
          if (result0 === null) {
            result0 = parse_BinaryDecimal();
            if (result0 === null) {
              result0 = parse_OctDecimal();
            }
          }
        }
        return result0;
      }
      
      function parse_Float() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Decimal();
        if (result0 !== null) {
          result1 = parse_Fraction();
          if (result1 !== null) {
            result2 = parse_Exponent();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, i, frac, exp) {
              return parseFloat(i + frac + exp);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_Decimal();
          if (result0 !== null) {
            result1 = parse_Fraction();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, i, frac) {
                return parseFloat(i + frac);
              })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_Decimal();
            if (result0 !== null) {
              if (input.charCodeAt(pos.offset) === 46) {
                result1 = ".";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, i) {
                  return parseFloat(i);
                })(pos0.offset, pos0.line, pos0.column, result0[0]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_Decimal();
              if (result0 !== null) {
                if (input.charCodeAt(pos.offset) === 46) {
                  result1 = ".";
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\".\"");
                  }
                }
                result1 = result1 !== null ? result1 : "";
                if (result1 !== null) {
                  result2 = parse_Exponent();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, i, exp) {
                    return parseFloat(i + exp);
                  })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_Fraction();
                if (result0 !== null) {
                  result1 = parse_Exponent();
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, frac, exp) {
                      return parseFloat(frac + exp);
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  result0 = parse_Fraction();
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, frac) {
                        return parseFloat(frac);
                      })(pos0.offset, pos0.line, pos0.column, result0);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_Decimal() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Sign();
        if (result0 !== null) {
          result1 = parse_Digit19();
          if (result1 !== null) {
            result2 = parse_Digits();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, sign, first, rest) {
              return parseInt(sign + first + rest);
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_Sign();
          if (result0 !== null) {
            result1 = parse_Digit();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, sign, digit) {
                return parseInt(sign + digit);
              })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_Hexadecimal() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_HexPrefix();
        if (result0 !== null) {
          result1 = parse_DigitsHex();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, digits) { return parseInt(digits, 16); })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_BinaryDecimal() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_BinaryPrefix();
        if (result0 !== null) {
          result1 = parse_DigitsBinary();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, digits) { return parseInt(digits, 2); })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_OctDecimal() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OctPrefix();
        if (result0 !== null) {
          result1 = parse_DigitsOct();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, digits) { return parseInt(digits, 8); })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Fraction() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 46) {
          result0 = ".";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Digits();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, digits) { return '.' + digits; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Exponent() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ExponentMarker();
        if (result0 !== null) {
          result1 = parse_Sign();
          if (result1 !== null) {
            result2 = parse_Digits();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, e, s, digits) {
              return e + s + digits;
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_DecimalPrefix() {
        var result0;
        
        if (input.substr(pos.offset, 2) === "#d") {
          result0 = "#d";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#d\"");
          }
        }
        result0 = result0 !== null ? result0 : "";
        return result0;
      }
      
      function parse_HexPrefix() {
        var result0;
        
        if (input.substr(pos.offset, 2) === "#x") {
          result0 = "#x";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#x\"");
          }
        }
        return result0;
      }
      
      function parse_OctPrefix() {
        var result0;
        
        if (input.substr(pos.offset, 2) === "#o") {
          result0 = "#o";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#o\"");
          }
        }
        return result0;
      }
      
      function parse_BinaryPrefix() {
        var result0;
        
        if (input.substr(pos.offset, 2) === "#b") {
          result0 = "#b";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#b\"");
          }
        }
        return result0;
      }
      
      function parse_ExponentMarker() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[esfdl]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[esfdl]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return "e"; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Sign() {
        var result0;
        
        if (/^[\-+]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\-+]");
          }
        }
        result0 = result0 !== null ? result0 : "";
        return result0;
      }
      
      function parse_Digits() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_Digit();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_Digit();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, digits) {
              return digits.join("");
            })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_DigitsHex() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_DigitHex();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_DigitHex();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, digits) {
              return digits.join("");
            })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_DigitsOct() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_DigitOct();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_DigitOct();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, digits) {
              return digits.join("");
            })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_DigitsBinary() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_DigitBinary();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_DigitBinary();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, digits) {
              return digits.join("");
            })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Digit() {
        var result0;
        
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        return result0;
      }
      
      function parse_Digit19() {
        var result0;
        
        if (/^[1-9]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[1-9]");
          }
        }
        return result0;
      }
      
      function parse_DigitHex() {
        var result0;
        
        if (/^[0-9a-fA-F]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9a-fA-F]");
          }
        }
        return result0;
      }
      
      function parse_DigitOct() {
        var result0;
        
        if (/^[0-7]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-7]");
          }
        }
        return result0;
      }
      
      function parse_DigitBinary() {
        var result0;
        
        if (/^[01]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[01]");
          }
        }
        return result0;
      }
      
      function parse_Datum() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_QuotePrefix();
        if (result0 !== null) {
          result1 = parse_Datum();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_QuotePrefix();
          if (result0 !== null) {
            result1 = parse_Datum();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            result0 = parse_UnquotePrefix();
            if (result0 !== null) {
              result1 = parse_Datum();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              result0 = parse_UnquotePrefix();
              if (result0 !== null) {
                result1 = parse_Datum();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
              if (result0 === null) {
                result0 = parse_List();
                if (result0 === null) {
                  result0 = parse_Token();
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_List() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 40) {
          result0 = "(";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_ListDatum();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_ListDatum();
          }
          if (result1 !== null) {
            result2 = parse_InterTokenSpace();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 41) {
                result3 = ")";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\")\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, list) {
              return list;
            })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 40) {
            result0 = "(";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result0 !== null) {
            result2 = parse_ListDatum();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_ListDatum();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_InterTokenSpace();
              if (result2 !== null) {
                if (input.charCodeAt(pos.offset) === 46) {
                  result3 = ".";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\".\"");
                  }
                }
                if (result3 !== null) {
                  result4 = parse_ListDatum();
                  if (result4 !== null) {
                    result5 = parse_InterTokenSpace();
                    if (result5 !== null) {
                      if (input.charCodeAt(pos.offset) === 41) {
                        result6 = ")";
                        advance(pos, 1);
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, head, last) {
                head.splice(head.length, 0, dot, last);
                return head;
              })(pos0.offset, pos0.line, pos0.column, result0[1], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_ListDatum() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_InterTokenSpace();
        if (result0 !== null) {
          result1 = parse_Datum();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, datum) {
              return datum;
            })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_QuotePrefix() {
        var result0;
        
        result0 = parse_Quote();
        if (result0 === null) {
          result0 = parse_Quasiquote();
        }
        return result0;
      }
      
      function parse_Quote() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 39) {
          result0 = "'";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return {type: 'symbol', value: 'quote'}; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Quasiquote() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 96) {
          result0 = "`";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"`\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return {type: 'symbol', value: 'quasiquote'}; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_UnquotePrefix() {
        var result0;
        
        result0 = parse_UnquoteSplicing();
        if (result0 === null) {
          result0 = parse_Unquote();
        }
        return result0;
      }
      
      function parse_UnquoteSplicing() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === ",@") {
          result0 = ",@";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\",@\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return {type: 'symbol', value: 'unquote-splicing'}; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_Unquote() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 44) {
          result0 = ",";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\",\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return {type: 'symbol', value: 'unquote'}; })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
        function Pair(car, cdr) {
          this.car = car;
          this.cdr = cdr;
        }
      
        var dot = {type: 'dot'};
        var nil = {type: 'nil'};
      
        function _toSexp(arr, idx, accu) {
          if (idx < 0) {
            return accu;
          }
      
          var car = toSexp(arr[idx]);
          return _toSexp(arr, --idx, new Pair(car, accu));
        }
      
        // JS array to Lisp list
        function toSexp(arr) {
          if (!Array.isArray(arr)) {
            return arr;
          }
      
          var len = arr.length;
          if (len > 2 && arr[len - 2] === dot) {
            return _toSexp(arr, len - 3, toSexp(arr[len - 1]));
          }
          return _toSexp(arr, len - 1, nil);
        }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
